{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Table","_ref","rows","cols","images","React","createElement","className","style","display","gridTemplateColumns","gridTemplateRows","width","height","overflow","Array","from","length","map","_","x","y","key","cellData","hasImage","success","src","statusColor","border","alignItems","justifyContent","position","alt","objectFit","status","top","left","backgroundColor","padding","fontSize","bottom","App","setRows","useState","setCols","setImages","useEffect","async","response","fetch","config","json","error","console","fetchConfig","fetchData","newImages","fetchPromises","promise","then","res","data","_ref2","img","catch","push","Promise","all","intervalId","setInterval","clearInterval","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b213d3d3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Table = ({ rows, cols, images }) => {\n  return (\n    <div\n      className=\"grid\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${cols}, 1fr)`,\n        gridTemplateRows: `repeat(${rows}, 1fr)`,\n        width: \"100vw\",\n        height: \"100vh\",\n        overflow: \"hidden\",\n      }}\n    >\n      {Array.from({ length: rows }).map((_, x) =>\n        Array.from({ length: cols }).map((_, y) => {\n          const key = `${x}-${y}`;\n          const cellData = images[key];\n          // Ha van érvényes kép, azt jelenítjük meg, különben \"No Image\" vagy 204-es kód\n          const hasImage = cellData && cellData.success && cellData.src;\n          // A cella alján lévő sáv színe: zöld, ha van kép, egyébként piros\n          const statusColor = hasImage ? \"green\" : \"red\";\n\n          return (\n            <div\n              key={key}\n              style={{\n                border: \"1px solid black\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                position: \"relative\",\n              }}\n            >\n              {hasImage ? (\n                <img\n                  src={cellData.src}\n                  alt={`QR (${x}, ${y})`}\n                  style={{ width: \"80%\", objectFit: \"cover\" }}\n                />\n              ) : (\n                <span>\n                  {cellData && cellData.status === 204\n                    ? cellData.status\n                    : \"No Image\"}\n                </span>\n              )}\n\n              {/* Státuszkód megjelenítése a cella bal felső sarkában */}\n              {cellData && cellData.status && (\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    backgroundColor: \"rgba(255, 255, 255, 0.8)\",\n                    padding: \"2px 4px\",\n                    fontSize: \"0.8rem\",\n                  }}\n                >\n                  {cellData.status}\n                </div>\n              )}\n\n              {/* Állapotcsík a cella alján */}\n              <div\n                style={{\n                  position: \"absolute\",\n                  bottom: 0,\n                  left: 0,\n                  width: \"100%\",\n                  height: \"5px\",\n                  backgroundColor: statusColor,\n                }}\n              />\n            </div>\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nconst App = () => {\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  // Az \"images\" objektum minden cellára: { src, success, status }\n  const [images, setImages] = useState({});\n\n  // Konfiguráció (sorok és oszlopok) lekérése a config.json-ból\n  useEffect(() => {\n    const fetchConfig = async () => {\n      try {\n        const response = await fetch(\"/config.json\");\n        const config = await response.json();\n        setRows(config.rows);\n        setCols(config.cols);\n      } catch (error) {\n        console.error(\"Hiba a konfiguráció lekérésekor:\", error);\n      }\n    };\n    fetchConfig();\n  }, []);\n\n  // Képek lekérése 5 másodpercenként\n  useEffect(() => {\n    if (rows === 0 || cols === 0) return;\n\n    const fetchData = async () => {\n      const newImages = {};\n      const fetchPromises = [];\n\n      for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n          const key = `${x}-${y}`;\n          const url = `/image?x=${x}&y=${y}`;\n          // Minden cellára elküldünk egy GET kérést\n          const promise = fetch(url)\n            .then((res) => {\n              const status = res.status;\n              if (status === 204) {\n                // Ha 204-es választ kapunk, nem várunk JSON-t, hanem azonnal visszatérünk\n                return { data: null, status };\n              }\n              return res.json().then((data) => ({ data, status }));\n            })\n            .then(({ data, status }) => {\n              if (data && data.img) {\n                newImages[key] = {\n                  src: `data:image/png;base64,${data.img}`,\n                  success: true,\n                  status: status,\n                };\n              } else {\n                newImages[key] = { success: false, status: status };\n              }\n            })\n            .catch(() => {\n              newImages[key] = { success: false, status: 404 };\n            });\n          fetchPromises.push(promise);\n        }\n      }\n\n      await Promise.all(fetchPromises);\n      // Az új eredményekkel frissítjük az \"images\" állapotot, így a felület újrarenderelődik\n      setImages(newImages);\n    };\n\n    // Első lekérés azonnal\n    fetchData();\n    // Majd 5 másodpercenként új lekérés\n    const intervalId = setInterval(fetchData, 5000);\n    return () => clearInterval(intervalId);\n  }, [rows, cols]);\n\n  return (\n    <div>\n      <Table rows={rows} cols={cols} images={images} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}